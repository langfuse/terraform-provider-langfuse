// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/langfuse/terraform-provider-langfuse/internal/langfuse (interfaces: OrganizationClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	langfuse "github.com/langfuse/terraform-provider-langfuse/internal/langfuse"
	gomock "github.com/golang/mock/gomock"
)

// MockOrganizationClient is a mock of OrganizationClient interface.
type MockOrganizationClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationClientMockRecorder
}

// MockOrganizationClientMockRecorder is the mock recorder for MockOrganizationClient.
type MockOrganizationClientMockRecorder struct {
	mock *MockOrganizationClient
}

// NewMockOrganizationClient creates a new mock instance.
func NewMockOrganizationClient(ctrl *gomock.Controller) *MockOrganizationClient {
	mock := &MockOrganizationClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationClient) EXPECT() *MockOrganizationClientMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockOrganizationClient) CreateProject(arg0 context.Context, arg1 *langfuse.CreateProjectRequest) (*langfuse.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(*langfuse.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockOrganizationClientMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockOrganizationClient)(nil).CreateProject), arg0, arg1)
}

// CreateProjectApiKey mocks base method.
func (m *MockOrganizationClient) CreateProjectApiKey(arg0 context.Context, arg1 string) (*langfuse.ProjectApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectApiKey", arg0, arg1)
	ret0, _ := ret[0].(*langfuse.ProjectApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectApiKey indicates an expected call of CreateProjectApiKey.
func (mr *MockOrganizationClientMockRecorder) CreateProjectApiKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectApiKey", reflect.TypeOf((*MockOrganizationClient)(nil).CreateProjectApiKey), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockOrganizationClient) DeleteProject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockOrganizationClientMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockOrganizationClient)(nil).DeleteProject), arg0, arg1)
}

// DeleteProjectApiKey mocks base method.
func (m *MockOrganizationClient) DeleteProjectApiKey(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectApiKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectApiKey indicates an expected call of DeleteProjectApiKey.
func (mr *MockOrganizationClientMockRecorder) DeleteProjectApiKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectApiKey", reflect.TypeOf((*MockOrganizationClient)(nil).DeleteProjectApiKey), arg0, arg1, arg2)
}

// GetProject mocks base method.
func (m *MockOrganizationClient) GetProject(arg0 context.Context, arg1 string) (*langfuse.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*langfuse.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockOrganizationClientMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockOrganizationClient)(nil).GetProject), arg0, arg1)
}

// GetProjectApiKey mocks base method.
func (m *MockOrganizationClient) GetProjectApiKey(arg0 context.Context, arg1, arg2 string) (*langfuse.ProjectApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectApiKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*langfuse.ProjectApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectApiKey indicates an expected call of GetProjectApiKey.
func (mr *MockOrganizationClientMockRecorder) GetProjectApiKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectApiKey", reflect.TypeOf((*MockOrganizationClient)(nil).GetProjectApiKey), arg0, arg1, arg2)
}

// ListProjects mocks base method.
func (m *MockOrganizationClient) ListProjects(arg0 context.Context) ([]*langfuse.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0)
	ret0, _ := ret[0].([]*langfuse.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockOrganizationClientMockRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockOrganizationClient)(nil).ListProjects), arg0)
}

// UpdateProject mocks base method.
func (m *MockOrganizationClient) UpdateProject(arg0 context.Context, arg1 string, arg2 *langfuse.UpdateProjectRequest) (*langfuse.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(*langfuse.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockOrganizationClientMockRecorder) UpdateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockOrganizationClient)(nil).UpdateProject), arg0, arg1, arg2)
}
